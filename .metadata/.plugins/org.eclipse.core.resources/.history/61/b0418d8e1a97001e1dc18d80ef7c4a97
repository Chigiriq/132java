
public class test {

	public class MazeSolver {
	    private static final char WALL = '#';
	    private static final char PATH = ' ';

	    public static void main(String[] args) {
	        // Example maze represented as a 2D array of characters
	        char[][] maze = {
	            {' ', '#', ' ', ' ', ' '},
	            {' ', '#', '#', '#', ' '},
	            {' ', ' ', ' ', ' ', ' '},
	            {'#', '#', '#', '#', ' '},
	            {' ', ' ', ' ', 'F', ' '}
	        };

	        // Starting point (row, column)
	        int startRow = 0;
	        int startCol = 0;

	        solveMaze(maze, startRow, startCol);
	    }

	    private static void solveMaze(char[][] maze, int currentRow, int currentCol) {
	        if (currentRow < 0 || currentCol < 0 || currentRow >= maze.length || currentCol >= maze[0].length) {
	            // We are out of bounds, return
	            return;
	        }

	        if (maze[currentRow][currentCol] == WALL || maze[currentRow][currentCol] == 'V') {
	            // We hit a wall or visited cell, return
	            return;
	        }

	        if (maze[currentRow][currentCol] == 'F') {
	            // We reached the endpoint
	            System.out.println("Maze solved! Endpoint reached at: (" + currentRow + ", " + currentCol + ")");
	            return;
	        }

	        // Mark the current cell as visited
	        maze[currentRow][currentCol] = 'V'; // You can use a different character to mark the visited cells
	        System.out.println("Visited: (" + currentRow + ", " + currentCol + ")");

	        // Move right, down, left, or up (following the right-hand rule)
	        solveMaze(maze, currentRow, currentCol + 1); // Move right
	        solveMaze(maze, currentRow + 1, currentCol); // Move down
	        solveMaze(maze, currentRow, currentCol - 1); // Move left
	        solveMaze(maze, currentRow - 1, currentCol); // Move up
	    }
	}
}

